package com.togrul.seyid.gags.viewers;

import it.sephiroth.android.library.imagezoom.ImageViewTouch;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.http.util.ByteArrayBuffer;

import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.ActionProvider;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.widget.ShareActionProvider;
import com.togrul.seyid.gags.libs.FileCache;
import com.togrul.seyid.gags.libs.MemoryCache;
import com.togrul.seyid.gags.libs.Utils;
import com.togrul.seyid.gags.viewers.dialogs.FileDialog;
import com.togrul.seyid.gags.viewers.dialogs.SelectionMode;
import com.togrulseyid.gags.viewer.R;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DownloadManager;
import android.app.DownloadManager.Request;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.text.Html;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class ImageViewer extends SherlockActivity {
	
	private ImageViewTouch image;
	private static final String TAG_SRC = "src";
	private static final String TAG_ALT = "alt";
	private String source_txt, subject;
	ImageViewer v ;
	Intent in;
	int loader;
	
	private static final int REQUEST_SAVE = 0;
	private static final int REQUEST_LOAD = 1;
	private ShareActionProvider mShareActionProvider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setTheme(R.style.Theme_Sherlock_Light_DarkActionBar);		 
		setContentView(R.layout.imageview);

		image = (ImageViewTouch) findViewById(R.id.ImageViewTouch);
		in = getIntent();
		source_txt = in.getStringExtra(TAG_SRC);
		subject = in.getStringExtra(TAG_ALT);
		
		loader = R.drawable.loader;
		v = new ImageViewer();
		v.ImageLoader(getApplicationContext());
		v.DisplayImage(source_txt, loader, image);
		
		
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		

//		getSupportActionBar().setBackgroundDrawable(getResources().getDrawable(R.drawable.ab_bg_black)); // ab_bg_black
		getSupportActionBar().setTitle(subject);
	}
	
	
    /**
     * {@inheritDoc}
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        getSupportMenuInflater().inflate(R.menu.images, menu);
       
        MenuItem item = menu.findItem(R.id.share_image);
		ShareActionProvider provider = (ShareActionProvider) item.getActionProvider();
//  	provider.setShareHistoryFileName(ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME);
		provider.setShareIntent(createShareIntent(subject, source_txt, subject + "\t\t" + source_txt));
		
        return true;
    }

    // Call to update the share intent
    private void setShareIntent(Intent shareIntent) {
        if (mShareActionProvider != null) {
            mShareActionProvider.setShareIntent(shareIntent);
        }
    }
    
	public File getFileFromChache(String filename, Bitmap bitmap) throws IOException {
		//create a file to write bitmap data
		File f = new File(getApplicationContext().getCacheDir(), filename);
		f.createNewFile();
	
		//Convert bitmap to byte array
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		bitmap.compress(CompressFormat.PNG, 0 /*ignored for PNG*/, bos);
		byte[] bitmapdata = bos.toByteArray();
	
		//write the bytes in file
		FileOutputStream fos = new FileOutputStream(f);
		fos.write(bitmapdata);
		fos.close();
		return f;
	}
	
	
	
	public File getFromURL(String filename, String source_txt) throws IOException {
		URL url = new URL(source_txt);
		File file = new File(getApplicationContext().getCacheDir(), filename);
		
		URLConnection ucon = url.openConnection();
		InputStream is = ucon.getInputStream();
		
		BufferedInputStream bis = new BufferedInputStream(is);
		ByteArrayBuffer baf = new ByteArrayBuffer(50);
		
		int current = 0;
		while ((current = bis.read()) != -1) {
			baf.append((byte) current);
		}
		FileOutputStream fos = new FileOutputStream(file);
		fos.write(baf.toByteArray());
		fos.close();
		
		return file;
	}
	
	File file = new File( Environment.getExternalStorageDirectory()+ "/0518596060.jpg");;
    @SuppressLint("NewApi")
	private Intent createShareIntent(String title, String source_txt, String subject) {
//    	
//    	Bitmap bitmap = memoryCache.get(source_txt);    	
//		if (bitmap != null){
//			try {
//				file = getFileFromChache("filename.png", bitmap);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}else {
//			try {
//				file = getFromURL("filename.png", source_txt);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
		
    	try {
			file = getFromURL("filename.png", source_txt);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	if(file==null)
    		Log.d("tag", "msg FIle is empty");
    	else {
    		Log.d("tag", "msg FIle is not empty");
    		Log.d("tag", file.getAbsolutePath());
    		Log.d("tag", file.getName());
    		Log.d("tag", file.getTotalSpace()+"");
    		Log.d("tag", file.exists()+"");
    		
    		
    		Log.d("tag", file.toString());
    		
    	}
    		
    	
		Uri uri = Uri.fromFile(file);
		Log.d("uri",uri.toString());
		
		String imagePath = getExternalCacheDir() + "/filename.png";
		File imageFileToShare = new File(imagePath);
//    	String imagePath = Environment.getExternalStorageDirectory()+ "/0518596060.jpg";
//		File imageFileToShare = new File(imagePath);
//		Uri uri = Uri.fromFile(imageFileToShare);

    	Intent share = new Intent(Intent.ACTION_SEND);
    	share.setType("image/*");
    	share.putExtra(Intent.EXTRA_STREAM, uri);
    	share.putExtra(android.content.Intent.EXTRA_SUBJECT, title); 
    	share.putExtra(android.content.Intent.EXTRA_TITLE, title);
    	share.putExtra(android.content.Intent.EXTRA_TEXT, title);
		return share;
    }

//    	shareIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
//        Uri uri = Uri.fromFile(getFileStreamPath(source_txt)); 
   
        

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		    case android.R.id.home:
		    	finish();
		    	return true;
		    case R.id.share_image:
		    	setShareIntent(new Intent(Intent.ACTION_SEND));
		    	return true;
		    	
		    case R.id.save_image:
		    	saveFile("title", "text");
		    	return true;
		    default: 
		    	return super.onOptionsItemSelected(item);  
		}
	}
	
	
	
	
	
	
	@SuppressLint("SdCardPath")
	private void saveFile(String title, String text) {
		// TODO Auto-generated method stub
		Intent intent = new Intent(getBaseContext(), FileDialog.class);
        intent.putExtra(FileDialog.START_PATH, "/sdcard");
        //can user select directories or not
        intent.putExtra(FileDialog.CAN_SELECT_DIR, true);
        intent.putExtra(FileDialog.SELECTION_MODE, SelectionMode.MODE_CREATE);
        startActivityForResult(intent, REQUEST_SAVE);
	}
	
	
	@Override
	public synchronized void onActivityResult(final int requestCode, int resultCode, final Intent data) {
        if (resultCode == Activity.RESULT_OK) {
	        if (requestCode == REQUEST_SAVE) {
                System.out.println("Saving...");
                System.out.println(data.getStringExtra(FileDialog.RESULT_PATH));
	        } else if (requestCode == REQUEST_LOAD) {
	                System.out.println("Loading...");
	        }
	        
	        String filePath = data.getStringExtra(FileDialog.RESULT_PATH);
	        createFile(filePath); // Writing to file if posible
	        
        } else if (resultCode == Activity.RESULT_CANCELED) {
        }
    }



	private void createFile(String fileName) {
		// TODO Auto-generated method stub
		if(isExternalStorageWritable()) {
			try {
				PrintStream out = null;
				try {
					out = new PrintStream(new FileOutputStream(fileName));
//					out.print("Title:\n"+title + "\n\n\nBody:\n" + text);
				}
				finally {
					if (out != null) out.close();
					makeDialog("Okkay.", "Image saved as "+fileName , R.drawable.ok, "09a014");
				}
			} catch (Exception e) {
				makeDialog("Error Occured.", e.getMessage() , R.drawable.error,"edbe19");
			       e.printStackTrace();
			}
			
			
		} else {
			makeDialog("Warning.", "Can not write to External Storage. Sorry Man Storage is not writable :(", R.drawable.warning, "E92828");     
		}
	}
	
	@SuppressWarnings("deprecation")
	public void makeDialog(String title, String message, int id, String color) {
		final AlertDialog alertDialog = new AlertDialog.Builder(ImageViewer.this).create();
        alertDialog.setTitle(Html.fromHtml("<h1><font color='#"+color+"'><b>"+title+"<b></font></h1>"));
        alertDialog.setMessage(Html.fromHtml("<strong>"+message+"</strong>"));
        alertDialog.setIcon(id);
        alertDialog.setButton("OK", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,int which) 
            {
            	alertDialog.hide();
            }
        });

        alertDialog.show(); 
	}
	
	
	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state)) {
	        return true;
	    }
	    return false;
	}
//========================================================================================
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		// TODO Auto-generated method stub
		super.onConfigurationChanged(newConfig);
		if(newConfig.orientation==Configuration.ORIENTATION_LANDSCAPE){
//		    Log.e("On Config Change","LANDSCAPE");
		}else{
//		    Log.e("On Config Change","PORTRAIT");
		}
	}

	/******************************************
	 * *
	 * * ImageView With Zoom Effect
	 * *
	 ******************************************/
	MemoryCache memoryCache = new MemoryCache();
	FileCache fileCache;
	private Map<ImageView, String> imageViews = Collections.synchronizedMap(new WeakHashMap<ImageView, String>());
	ExecutorService executorService;

	public void ImageLoader(Context context) {
		fileCache = new FileCache(context);
		executorService = Executors.newFixedThreadPool(5);
	}

	int stub_id = R.drawable.icon;

	public void DisplayImage(String url, int loader, ImageViewTouch imageView) {
		stub_id = loader;
		imageViews.put(imageView, url);
		Bitmap bitmap = memoryCache.get(url);
		if (bitmap != null){
			imageView.setImageBitmap(bitmap);
//			imageView.setMaxZoom(5f); // ImageViewTouch Zoom
		}else {
			queuePhoto(url, imageView);
			imageView.setImageResource(loader);
		}
	}

	private void queuePhoto(String url, ImageViewTouch imageView) {
		PhotoToLoad p = new PhotoToLoad(url, imageView);
		executorService.submit(new PhotosLoader(p));
	}

	private Bitmap getBitmap(String url) {
		File f = fileCache.getFile(url);

		// from SD cache
		Bitmap b = decodeFile(f);
		if (b != null)
			return b;

		// from web
		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl.openConnection();
			conn.setConnectTimeout(30000);
			conn.setReadTimeout(30000);
			conn.setInstanceFollowRedirects(true);
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			Utils.CopyStream(is, os);
			os.close();
			bitmap = decodeFile(f);
			return bitmap;
		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}
	}

	// decodes image and scales it to reduce memory consumption
	private Bitmap decodeFile(File f) {
		try {
			// decode image size
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(new FileInputStream(f), null, o);

			// Find the correct scale value. It should be the power of 2.
//			final int REQUIRED_SIZE = 700;
			final int REQUIRED_SIZE = 1000;
			int width_tmp = o.outWidth, height_tmp = o.outHeight;
			int scale = 1;
			while (true) {
				if (width_tmp / 2 < REQUIRED_SIZE || height_tmp / 2 < REQUIRED_SIZE)
					break;
				width_tmp /= 2;
				height_tmp /= 2;
				scale *= 2;
			}

			// decode with inSampleSize
			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = scale;
			return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
		} catch (FileNotFoundException e) {
		}
		return null;
	}

	// Task for the queue
	private class PhotoToLoad {
		public String url;
		public ImageViewTouch imageView;

		public PhotoToLoad(String u, ImageViewTouch i) {
			url = u;
			imageView = i;
		}
	}

	class PhotosLoader implements Runnable {
		PhotoToLoad photoToLoad;

		PhotosLoader(PhotoToLoad photoToLoad) {
			this.photoToLoad = photoToLoad;
		}

		@Override
		public void run() {
			if (imageViewReused(photoToLoad))
				return;
			Bitmap bmp = getBitmap(photoToLoad.url);
			memoryCache.put(photoToLoad.url, bmp);
			if (imageViewReused(photoToLoad))
				return;
			BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
			Activity a = (Activity) photoToLoad.imageView.getContext();
			a.runOnUiThread(bd);
		}
	}

	boolean imageViewReused(PhotoToLoad photoToLoad) {
		String tag = imageViews.get(photoToLoad.imageView);
		if (tag == null || !tag.equals(photoToLoad.url))
			return true;
		return false;
	}

	// Used to display bitmap in the UI thread
	class BitmapDisplayer implements Runnable {
		Bitmap bitmap;
		PhotoToLoad photoToLoad;

		public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
			bitmap = b;
			photoToLoad = p;
		}

		public void run() {
			if (imageViewReused(photoToLoad))
				return;
			if (bitmap != null)
				photoToLoad.imageView.setImageBitmap(bitmap);
			else
				photoToLoad.imageView.setImageResource(stub_id);
		}
	}

	public void clearCache() {
		memoryCache.clear();
		fileCache.clear();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//    public static class SettingsActionProvider extends ActionProvider {
//
//        /** An intent for launching the system settings. */
//        private static final Intent sSettingsIntent = new Intent(Settings.ACTION_SETTINGS);
//
//        /** Context for accessing resources. */
//        private final Context mContext;
//
//        /**
//         * Creates a new instance.
//         *
//         * @param context Context for accessing resources.
//         */
//        public SettingsActionProvider(Context context) {
//            super(context);
//            mContext = context;
//        }
//
//        /**
//         * {@inheritDoc}
//         */
//        @Override
//        public View onCreateActionView() {
//            // Inflate the action view to be shown on the action bar.
//            LayoutInflater layoutInflater = LayoutInflater.from(mContext);
//            View view = layoutInflater.inflate(R.layout.settings_action_provider, null);
//            ImageButton button = (ImageButton) view.findViewById(R.id.button);
//            // Attach a click listener for launching the system settings.
//            button.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View v) {
//                    mContext.startActivity(sSettingsIntent);
//                }
//            });
//            return view;
//        }
//
//        /**
//         * {@inheritDoc}
//         */
//        @Override
//        public boolean onPerformDefaultAction() {
//            // This is called if the host menu item placed in the overflow menu of the
//            // action bar is clicked and the host activity did not handle the click.
//            mContext.startActivity(sSettingsIntent);
//            return true;
//        }
//    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static Toast makeImageToast(Context context, int imageResId, Bitmap bm, CharSequence text, int length) {
	    Toast toast = Toast.makeText(context, text, length);

	    View rootView = toast.getView();
	    LinearLayout linearLayout = null;
	    View messageTextView = null;

	    // check (expected) toast layout
	    if (rootView instanceof LinearLayout) {
	        linearLayout = (LinearLayout) rootView;

	        if (linearLayout.getChildCount() == 1) {
	            View child = linearLayout.getChildAt(0);

	            if (child instanceof TextView) {
	                messageTextView = (TextView) child;
	            }
	        }
	    }

	    // cancel modification because toast layout is not what we expected
	    if (linearLayout == null || messageTextView == null) {
	        return toast;
	    }

	    ViewGroup.LayoutParams textParams = messageTextView.getLayoutParams();
	    ((LinearLayout.LayoutParams) textParams).gravity = Gravity.CENTER_VERTICAL;

	    // convert dip dimension
	    float density = context.getResources().getDisplayMetrics().density;
	    int imageSize = (int) (density * 25 + 0.5f);
	    int imageMargin = (int) (density * 15 + 0.5f);

	    // setup image view layout parameters
	    LinearLayout.LayoutParams imageParams = new LinearLayout.LayoutParams(imageSize, imageSize);
	    imageParams.setMargins(0, 0, imageMargin, 0);
	    imageParams.gravity = Gravity.CENTER_VERTICAL;

	    // setup image view
	    ImageView imageView = new ImageView(context);
//	    imageView.setImageResource(imageResId);
	    imageView.setImageBitmap(bm);
	    imageView.setLayoutParams(imageParams);

	    // modify root layout
	    linearLayout.setOrientation(LinearLayout.HORIZONTAL);
	    linearLayout.addView(imageView, 0);

	    return toast;
	}

}
